package com.etel.common.service;

//--- UTILITIES
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;

import com.smslai_eoddb.SMSLAI_EODDB;
import com.wavemaker.runtime.RuntimeAccess;

/**
 * @author MMM Java Services
 *         http://dev.wavemaker.com/wiki/bin/wmdoc_6.5/JavaServices Cannot use
 *         SELECT statements via executeQuery(). Looking for simple example
 *         http://dev.wavemaker.com/forums/?q=node/7024
 * 
 */
public class DBServiceImpl implements DBService {

	// ================================================================================================================================//
	// TODO: add this so that you will save precious resources
	// prevents instantiation
	// private DBServiceImpl(){}
	// ================================================================================================================================//

	// IMPORTANT!!!
	private static final String DBNAME = "SMSLAI_EODDB";
	/**
	 * name of the database service name generated by the wavemaker
	 */
	private static final DBServiceImpl dbServiceImpl = new DBServiceImpl();

	/**
	 * Returns a global instance of this DBService implementation
	 * 
	 * @return
	 */
	public static DBService getInstance() {
		return dbServiceImpl;
	}

	private static final Logger logger = Logger.getLogger(DBServiceImpl.class);

	// ================================================================================================================================//
	// TODO: OTHER Execution of Getting and Setting Data for Database
	// ================================================================================================================================//
	@Override
	public Object executeUniqueSQLQuery(String sQuery, Map parameters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			SQLQuery query = session.createSQLQuery(sQuery);
			query.setProperties(parameters);
			Object object = query.uniqueResult();
			service.commit();
			return object;
		} catch (Exception ex) {
			logger.warn("Error executing query", ex);
			service.rollback();
		}

		return null;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List executeListSQLQuery(String sQuery, Map parameters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			SQLQuery query = session.createSQLQuery(sQuery);
			query.setProperties(parameters);
			List list = query.list();
			service.commit();

			// ---
			return list;

		} catch (Exception ex) {
			logger.warn("Error executing query", ex);
			service.rollback();
		}

		return null;
	}

	/*
	 * Replicate HQL UniqueQuery & just set maximum result to 1 record
	 */
	@Override
	public Object executeUniqueHQLQueryMaxResultOne(String hql, Map parameters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);
			query.setMaxResults(1); // Reinforce to Set maximun result to 1
									// record

			Object object = query.uniqueResult();
			service.commit();

			// ---
			return object;

		} catch (Exception ex) {
			logger.fatal("Problem executing query " + hql + " with parameters" + parameters, ex);
			service.rollback();
		}

		return null;
	}

	@Override
	public Object executeUniqueHQLQuery(String hql, Map parameters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);

			Object object = query.uniqueResult();
			service.commit();

			// ---
			return object;

		} catch (Exception ex) {
			logger.fatal("Problem executing query " + hql + " with parameters" + parameters, ex);
			service.rollback();
		}

		return null;
	}

	@Override
	public List executeListHQLQuery(String hql, Map parameters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);

			List list = query.list();
			service.commit();

			// ---
			return list;

		} catch (Exception ex) {
			logger.warn("ERROR AT DBService.executeListHQLQuery: ", ex);
			logger.fatal("Problem executing query " + hql + " with parameters" + parameters, ex);
			service.rollback();
		}

		return null;
	}

	// BE CAREFUl WITH THE USE
	@Override
	public int executeUpdate(String sQuery, Map paramaters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			SQLQuery query = session.createSQLQuery(sQuery);
			query.setProperties(paramaters);

			int affectedRows = query.executeUpdate();
			service.commit();

			// ---
			return affectedRows;

		} catch (Exception ex) {
			logger.fatal("Problem executing update " + sQuery + " with parameters" + paramaters, ex);
			service.rollback();
		}

		return 0;
	}

	// BE CAREFUl WITH THE USE
	@Override
	public int executeHQLUpdate(String hql, Map paramaters) {
		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(paramaters);

			int affectedRows = query.executeUpdate();
			service.commit();

			// ---
			return affectedRows;

		} catch (Exception ex) {
			logger.fatal("Problem executing update " + hql + " with parameters" + paramaters, ex);
			service.rollback();
		}

		return 0;
	}

	// BE CAREFUl WITH THE USE
	@Override
	public boolean saveOrUpdate(Object objectToSave) {
		boolean isSuccessfulPayment = false;
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);
		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			if (objectToSave instanceof List) {
				List list = (List) objectToSave;
				for (Object object : list) {
					session.saveOrUpdate(object);
					service.commit();
				}
			} else {
				session.saveOrUpdate(objectToSave);
				service.commit();
			}
			isSuccessfulPayment = true;
		} catch (Exception ex) {
			ex.printStackTrace();
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToSave, ex);
		}
		return isSuccessfulPayment;
	}

	// BE CAREFUl WITH THE USE
	// --- Save object to DB
	@Override
	public boolean save(Object objectToSave) {
		boolean isSuccessfulPayment = false;

		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			// --- Save list of object
			if (objectToSave instanceof List) {
				List list = (List) objectToSave;

				for (Object object : list) {
					session.save(object);
					service.commit();
				}
			}
			// --- Save object
			else {
				session.save(objectToSave);
				service.commit();
			}

			isSuccessfulPayment = true;
		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToSave, ex);
		}
		return isSuccessfulPayment;
	}

	// BE CAREFUl WITH THE USE
	// --- Update specific object to DB
	@Override
	public boolean update(Object objectToUpdate) {
		boolean isSuccessfulPayment = false;
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);
		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			// --- Save list of object
			if (objectToUpdate instanceof List) {
				List list = (List) objectToUpdate;
				for (Object object : list) {
					session.update(object);
					service.commit();
				}
			}
			// --- Save object
			else {
				session.update(objectToUpdate);
				service.commit();
			}

			isSuccessfulPayment = true;
		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToUpdate, ex);
		}
		return isSuccessfulPayment;
	}

	@Override
	public boolean delete(Object objectToDelete) {
		boolean isSuccessfulPayment = false;

		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {

			service.begin();
			Session session = service.getDataServiceManager().getSession();

			// --- Save list of object
			if (objectToDelete instanceof List) {
				List list = (List) objectToDelete;

				for (Object object : list) {
					session.delete(object);
					service.commit();
				}
			}
			// --- Save object
			else {
				session.delete(objectToDelete);
				service.commit();
			}

			isSuccessfulPayment = true;

		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToDelete, ex);
		}
		return isSuccessfulPayment;
	}

	@Override
	public Serializable saveObject(Object objectToSave) {
		Serializable valSerializable = null;

		// ---
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			valSerializable = session.save(objectToSave);
			service.commit();

		} catch (Exception ex) {
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToSave, ex);
		}
		return valSerializable;
	}

	@Override
	public Object executeListHQLQueryPagination(String hql, Map parameters, int firstResult, int maxResult) {
		// TODO Auto-generated method stub
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);
			query.setFirstResult(firstResult);
			query.setMaxResults(maxResult);
			List list = query.list();
			service.commit();

			// ---
			return list;

		} catch (Exception ex) {
			logger.warn("ERROR AT DBService.executeListHQLQuery: ", ex);
			logger.fatal("Problem executing query " + hql + " with parameters" + parameters, ex);
			service.rollback();
		}

		return null;
	}

	@Override
	public int getSQLMaxId(String query, Map parameter) {
		// TODO Auto-generated method stub
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);
		int result = 0;
		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			SQLQuery sqlquery = session.createSQLQuery(query);
			sqlquery.setProperties(parameter);
			if (sqlquery.uniqueResult() == null) {
				// Do nothing
			} else {
				result = Integer.valueOf(String.valueOf(sqlquery.uniqueResult()));
			}
			service.commit();
		} catch (Exception e) {
			logger.warn("ERROR AT DB SERVICE MAXID ", e);
			service.rollback();
		}
		return result;
	}

	@Override
	public BigDecimal getSQLAmount(String query, Map parameter) {
		// TODO Auto-generated method stub
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);
		BigDecimal result = BigDecimal.ZERO;
		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			SQLQuery sqlquery = session.createSQLQuery(query);
			sqlquery.setProperties(parameter);
			if (sqlquery.uniqueResult() == null) {
				// Do nothing
			} else {
				result = (BigDecimal) sqlquery.uniqueResult();
			}
			service.commit();
		} catch (Exception e) {
			logger.warn("ERROR AT DB SERVICE TOTAL AMOUNT ROUTINE", e);
			service.rollback();
		}
		return result;
	}

	@Override
	public boolean execQuery(String query, Map param) {
		// TODO Auto-generated method stub
		boolean success = false;
		SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);
		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			SQLQuery sqlquery = session.createSQLQuery(query);
			sqlquery.setProperties(param);
			sqlquery.executeUpdate();
			success = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return success;
	}

	@Override
	public Object execStoredProc(String query, Map param, Class classname, int rettype, Object obj) {
		// TODO Auto-generated method stub
		/*
		 * ret type 0 = unique result ret type 1 = list result ret type 2 = flag
		 * result/confirmation/delete ret type 3 = saveOrUpdate ret type 4 = save ret type 5 = batch
		 */
		boolean go = true;
		if (query != null) {
			if (query.contains(";") || (query.contains("/") && query.contains("*"))) {
				logger.warn("Query Terminated : Possible SQL Injection Attack! ");
				go = false;
			}
		}
		if (go == true) {
			SMSLAI_EODDB service = (SMSLAI_EODDB) RuntimeAccess.getInstance().getServiceBean(DBNAME);
			try {
				service.begin();
				Session session = service.getDataServiceManager().getSession();
				SQLQuery sqlquery = null;
				if (obj == null) {
					sqlquery = session.createSQLQuery(query);
					sqlquery.setProperties(param);
				}
				if (classname != null) {
					sqlquery.setResultTransformer(Transformers.aliasToBean(classname));
				}
				if (rettype == 0) {
					Object object = sqlquery.uniqueResult();
					service.commit();
					return object;
				} else if (rettype == 1) {
					List list = sqlquery.list();
					service.commit();
					return list;
				} else if (rettype == 2) {
					int flg = sqlquery.executeUpdate();
					service.commit();
					return flg;
				} else if (rettype == 3) {
					int res = 0;
					try {
						session.saveOrUpdate(obj);
						service.commit();
						res = 1;
					} catch (Exception e) {
						service.rollback();
					}
					return res;
				} else if (rettype == 4) {
					int res = 0;
					try {
						session.save(obj);
						service.commit();
						res = 1;
					} catch (Exception e) {
						service.rollback();
					}
					return res;
				} else if (rettype == 5) {
					int res = 0;
					List<Object[]> obb = (List<Object[]>) obj;
					try {
						int count = 0;
						for (Object ob : obb) {
							count++;
							session.save(ob);
							if (count % 20 == 0) {
								session.flush();
								session.clear();
							}
						}
						service.commit();
						session.close();
						res = 1;
					} catch (Exception e) {
						service.rollback();
					}
					return res;
				}
			} catch (Exception ex) {
				logger.warn("Error executing query", ex);
				ex.printStackTrace();
				service.rollback();
			}

			return null;
		}
		return null;
	}

}